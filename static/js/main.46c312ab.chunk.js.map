{"version":3,"sources":["ShoppingList.js","App.js","serviceWorker.js","index.js"],"names":["ShoppingList","props","state","item","shoppingCart","handleChange","bind","handleSubmit","e","target","value","this","setState","preventDefault","newItem","concat","alert","itemList","i","push","key","style","marginLeft","onClick","onclick","cart","Object","assign","splice","length","onSubmit","name","type","onChange","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qPA8EeA,E,kDA1EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,KAAM,GACNC,aAAc,IAGlB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATL,E,yDAYNE,GACT,IAAML,EAAOK,EAAEC,OAAOC,MACtBC,KAAKC,SAAS,CAACT,KAAMA,IACrBK,EAAEK,mB,mCAGOL,GACT,IAAMM,EAAUH,KAAKT,MAAMC,KACX,KAAZW,GACAH,KAAKC,SAAS,CAACR,aAAcO,KAAKT,MAAME,aAAaW,OAAOD,KAC5DH,KAAKC,SAAS,CAACT,KAAM,KACrBK,EAAEK,mBAEFG,MAAM,2CACNR,EAAEK,oB,+BAMN,IAFM,IAAD,OACDI,EAAW,GADV,WAEGC,GACJD,EAASE,KACL,wBACIC,IAAKF,GAAI,EAAKhB,MAAME,aAAac,GACjC,4BACIG,MAAO,CAACC,WAAY,QACpBC,QAAS,WAEF,EAAKrB,MAAME,aAAac,GAAGM,QAG9B,IAAMC,EAAOC,OAAOC,OAAO,GAAI,EAAKzB,MAAME,cAC1CqB,EAAKG,OAAOV,EAAG,GACf,EAAKN,SAAS,CAACR,aAAcqB,MATrC,aAJJP,EAAE,EAAGA,EAAIP,KAAKT,MAAME,aAAayB,OAAQX,IAAM,EAA/CA,GAkBR,OACI,6BACI,0BAAMY,SAAYnB,KAAKJ,cACnB,gDAEI,2BAAOc,MAAO,CAACC,WAAW,OACtBS,KAAK,OACLC,KAAK,OACLtB,MAAOC,KAAKT,MAAMC,KAClB8B,SAAUtB,KAAKN,gBAGvB,4BAAQ2B,KAAK,SAASX,MAAO,CAACC,WAAY,SAA1C,yBAGJ,4BACKL,Q,GApEMiB,IAAMC,W,MCelBC,MAbf,WAEE,OACE,yBAAKC,UAAU,OACd,gDACD,kBAAC,EAAD,QCGgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.46c312ab.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass ShoppingList extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            item: '',\r\n            shoppingCart: []\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChange(e) {\r\n        const item = e.target.value;\r\n        this.setState({item: item});\r\n        e.preventDefault();\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        const newItem = this.state.item;\r\n        if (newItem !== '') {\r\n            this.setState({shoppingCart: this.state.shoppingCart.concat(newItem)});\r\n            this.setState({item: ''});\r\n            e.preventDefault();\r\n        } else {\r\n            alert('Text Field Cannot be Blank...Try Again!');\r\n            e.preventDefault();\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let itemList = [];\r\n        for(let i=0; i < this.state.shoppingCart.length; i++) {\r\n            itemList.push(\r\n                <li\r\n                    key={i}>{this.state.shoppingCart[i]}\r\n                    <button \r\n                        style={{marginLeft: \"10px\"}}\r\n                        onClick={()=>{\r\n                            let index;\r\n                            if(this.state.shoppingCart[i].onclick){\r\n                                index = i;\r\n                            }\r\n                            const cart = Object.assign([], this.state.shoppingCart);\r\n                            cart.splice(i, 1);\r\n                            this.setState({shoppingCart: cart});\r\n                    }}>Delete</button>\r\n                </li>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <form onSubmit = {this.handleSubmit}>\r\n                    <label>\r\n                        Shopping Item:\r\n                        <input style={{marginLeft:\"5px\"}}\r\n                            name=\"item\"\r\n                            type=\"text\"\r\n                            value={this.state.item}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </label>\r\n                    <button type='submit' style={{marginLeft: \"10px\"}}>Add to Shopping List</button>\r\n                </form>\r\n                \r\n                <ul>\r\n                    {itemList}\r\n                </ul>\r\n            </div>\r\n    \r\n        );\r\n    }\r\n}\r\n\r\nexport default ShoppingList;","import React from 'react';\nimport ShoppingList from './ShoppingList';\nimport './App.css';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n     <h1>My Shopping List</h1>\n    <ShoppingList />\n    </div>\n    \n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n//  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}